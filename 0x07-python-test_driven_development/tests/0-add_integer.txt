===============================
  How to Use 0-add_integer.py
===============================
This library is very simple, since it only has one function called
``add_integer()``.

Int and Float Arguments
========================

``add_integer()`` returns the sum of its argument. For integers and float, that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__("0-add_integer").add_integer
    >>> add_integer(2, 5)
    7

The second argument has a default value of 98, so we can pass in  just one argument to it.

::

    >>> add_integer(10)
    108
 

We can also pass in float values, and these values will be type casted into type int

::

    >>> add_integer(12.5, 4.43)
    16

Int and float values can also be mixed together

::
    >>> add_integer(4.9, 3)
    7

Negative values
=================

It works well for negative integers and floats too.

::

    >>> add_integer(-23, 24)
    1

::

    >>> add_integer(-483.1, -124)
    -607


Wrong Argument type
====================

``add_integer()`` takes in only arguments of type int or type float.
Arguments with other types will result in a type error.
::

    >>> add_integer("first int", 24)
    Traceback (most recent call last):
    ...
        raise TypeError("a must be an integer or b must be an integer")
    TypeError: a must be an integer or b must be an integer


Same thing applies for None types too
::

    >>> add_integer(None)
    Traceback (most recent call last):
    ...
        raise TypeError("a must be an integer or b must be an integer")
    TypeError: a must be an integer or b must be an integer

